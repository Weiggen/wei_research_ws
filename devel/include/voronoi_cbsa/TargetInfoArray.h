// Generated by gencpp from file voronoi_cbsa/TargetInfoArray.msg
// DO NOT EDIT!


#ifndef VORONOI_CBSA_MESSAGE_TARGETINFOARRAY_H
#define VORONOI_CBSA_MESSAGE_TARGETINFOARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <voronoi_cbsa/TargetInfo.h>

namespace voronoi_cbsa
{
template <class ContainerAllocator>
struct TargetInfoArray_
{
  typedef TargetInfoArray_<ContainerAllocator> Type;

  TargetInfoArray_()
    : targets()  {
    }
  TargetInfoArray_(const ContainerAllocator& _alloc)
    : targets(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >> _targets_type;
  _targets_type targets;





  typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct TargetInfoArray_

typedef ::voronoi_cbsa::TargetInfoArray_<std::allocator<void> > TargetInfoArray;

typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfoArray > TargetInfoArrayPtr;
typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfoArray const> TargetInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator2> & rhs)
{
  return lhs.targets == rhs.targets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace voronoi_cbsa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb14593f2221c85378b0d6d6b83f5b15";
  }

  static const char* value(const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb14593f2221c853ULL;
  static const uint64_t static_value2 = 0x78b0d6d6b83f5b15ULL;
};

template<class ContainerAllocator>
struct DataType< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voronoi_cbsa/TargetInfoArray";
  }

  static const char* value(const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TargetInfo[] targets\n"
"================================================================================\n"
"MSG: voronoi_cbsa/TargetInfo\n"
"int64                   id\n"
"geometry_msgs/Point     position\n"
"float32                 height\n"
"float64[]               covariance\n"
"float32                 weight\n"
"geometry_msgs/Twist     velocity\n"
"string[]                required_sensor\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.targets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voronoi_cbsa::TargetInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "targets[]" << std::endl;
    for (size_t i = 0; i < v.targets.size(); ++i)
    {
      s << indent << "  targets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.targets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VORONOI_CBSA_MESSAGE_TARGETINFOARRAY_H
