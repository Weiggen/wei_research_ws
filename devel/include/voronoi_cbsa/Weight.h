// Generated by gencpp from file voronoi_cbsa/Weight.msg
// DO NOT EDIT!


#ifndef VORONOI_CBSA_MESSAGE_WEIGHT_H
#define VORONOI_CBSA_MESSAGE_WEIGHT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace voronoi_cbsa
{
template <class ContainerAllocator>
struct Weight_
{
  typedef Weight_<ContainerAllocator> Type;

  Weight_()
    : type()
    , event_id(0)
    , score(0.0)  {
    }
  Weight_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , event_id(0)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef int16_t _event_id_type;
  _event_id_type event_id;

   typedef double _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::voronoi_cbsa::Weight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voronoi_cbsa::Weight_<ContainerAllocator> const> ConstPtr;

}; // struct Weight_

typedef ::voronoi_cbsa::Weight_<std::allocator<void> > Weight;

typedef boost::shared_ptr< ::voronoi_cbsa::Weight > WeightPtr;
typedef boost::shared_ptr< ::voronoi_cbsa::Weight const> WeightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voronoi_cbsa::Weight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voronoi_cbsa::Weight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::voronoi_cbsa::Weight_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::Weight_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.event_id == rhs.event_id &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::voronoi_cbsa::Weight_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::Weight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace voronoi_cbsa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::Weight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::Weight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::Weight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::Weight_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::Weight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::Weight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voronoi_cbsa::Weight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "114b2405c586c01c700456b3e7f87d9e";
  }

  static const char* value(const ::voronoi_cbsa::Weight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x114b2405c586c01cULL;
  static const uint64_t static_value2 = 0x700456b3e7f87d9eULL;
};

template<class ContainerAllocator>
struct DataType< ::voronoi_cbsa::Weight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voronoi_cbsa/Weight";
  }

  static const char* value(const ::voronoi_cbsa::Weight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voronoi_cbsa::Weight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  type\n"
"int16   event_id\n"
"float64 score\n"
;
  }

  static const char* value(const ::voronoi_cbsa::Weight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voronoi_cbsa::Weight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.event_id);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Weight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voronoi_cbsa::Weight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voronoi_cbsa::Weight_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "event_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.event_id);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VORONOI_CBSA_MESSAGE_WEIGHT_H
