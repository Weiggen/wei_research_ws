// Generated by gencpp from file voronoi_cbsa/SensorArray.msg
// DO NOT EDIT!


#ifndef VORONOI_CBSA_MESSAGE_SENSORARRAY_H
#define VORONOI_CBSA_MESSAGE_SENSORARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <voronoi_cbsa/Sensor.h>

namespace voronoi_cbsa
{
template <class ContainerAllocator>
struct SensorArray_
{
  typedef SensorArray_<ContainerAllocator> Type;

  SensorArray_()
    : sensors()  {
    }
  SensorArray_(const ContainerAllocator& _alloc)
    : sensors(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::voronoi_cbsa::Sensor_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::voronoi_cbsa::Sensor_<ContainerAllocator> >> _sensors_type;
  _sensors_type sensors;





  typedef boost::shared_ptr< ::voronoi_cbsa::SensorArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voronoi_cbsa::SensorArray_<ContainerAllocator> const> ConstPtr;

}; // struct SensorArray_

typedef ::voronoi_cbsa::SensorArray_<std::allocator<void> > SensorArray;

typedef boost::shared_ptr< ::voronoi_cbsa::SensorArray > SensorArrayPtr;
typedef boost::shared_ptr< ::voronoi_cbsa::SensorArray const> SensorArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voronoi_cbsa::SensorArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::voronoi_cbsa::SensorArray_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::SensorArray_<ContainerAllocator2> & rhs)
{
  return lhs.sensors == rhs.sensors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::voronoi_cbsa::SensorArray_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::SensorArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace voronoi_cbsa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::SensorArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::SensorArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::SensorArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1d908c1ca577e30068931de829be081";
  }

  static const char* value(const ::voronoi_cbsa::SensorArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1d908c1ca577e30ULL;
  static const uint64_t static_value2 = 0x068931de829be081ULL;
};

template<class ContainerAllocator>
struct DataType< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voronoi_cbsa/SensorArray";
  }

  static const char* value(const ::voronoi_cbsa::SensorArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Sensor[] sensors\n"
"================================================================================\n"
"MSG: voronoi_cbsa/Sensor\n"
"string type\n"
"float64 score\n"
;
  }

  static const char* value(const ::voronoi_cbsa::SensorArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voronoi_cbsa::SensorArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voronoi_cbsa::SensorArray_<ContainerAllocator>& v)
  {
    s << indent << "sensors[]" << std::endl;
    for (size_t i = 0; i < v.sensors.size(); ++i)
    {
      s << indent << "  sensors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voronoi_cbsa::Sensor_<ContainerAllocator> >::stream(s, indent + "    ", v.sensors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VORONOI_CBSA_MESSAGE_SENSORARRAY_H
