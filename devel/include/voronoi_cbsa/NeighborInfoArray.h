// Generated by gencpp from file voronoi_cbsa/NeighborInfoArray.msg
// DO NOT EDIT!


#ifndef VORONOI_CBSA_MESSAGE_NEIGHBORINFOARRAY_H
#define VORONOI_CBSA_MESSAGE_NEIGHBORINFOARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <voronoi_cbsa/NeighborInfo.h>

namespace voronoi_cbsa
{
template <class ContainerAllocator>
struct NeighborInfoArray_
{
  typedef NeighborInfoArray_<ContainerAllocator> Type;

  NeighborInfoArray_()
    : neighbors()  {
    }
  NeighborInfoArray_(const ContainerAllocator& _alloc)
    : neighbors(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::voronoi_cbsa::NeighborInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::voronoi_cbsa::NeighborInfo_<ContainerAllocator> >> _neighbors_type;
  _neighbors_type neighbors;





  typedef boost::shared_ptr< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct NeighborInfoArray_

typedef ::voronoi_cbsa::NeighborInfoArray_<std::allocator<void> > NeighborInfoArray;

typedef boost::shared_ptr< ::voronoi_cbsa::NeighborInfoArray > NeighborInfoArrayPtr;
typedef boost::shared_ptr< ::voronoi_cbsa::NeighborInfoArray const> NeighborInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator2> & rhs)
{
  return lhs.neighbors == rhs.neighbors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace voronoi_cbsa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc1d874a9451abd6cbb97a2b631e4d4f";
  }

  static const char* value(const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc1d874a9451abd6ULL;
  static const uint64_t static_value2 = 0xcbb97a2b631e4d4fULL;
};

template<class ContainerAllocator>
struct DataType< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voronoi_cbsa/NeighborInfoArray";
  }

  static const char* value(const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NeighborInfo[] neighbors\n"
"================================================================================\n"
"MSG: voronoi_cbsa/NeighborInfo\n"
"int16 id\n"
"geometry_msgs/Point position\n"
"SensorArray role\n"
"float64             operation_range\n"
"float64             approx_param\n"
"float64             smoke_variance\n"
"float64             camera_range\n"
"float64             angle_of_view\n"
"float64             camera_variance\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: voronoi_cbsa/SensorArray\n"
"Sensor[] sensors\n"
"================================================================================\n"
"MSG: voronoi_cbsa/Sensor\n"
"string type\n"
"float64 score\n"
;
  }

  static const char* value(const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.neighbors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NeighborInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voronoi_cbsa::NeighborInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "neighbors[]" << std::endl;
    for (size_t i = 0; i < v.neighbors.size(); ++i)
    {
      s << indent << "  neighbors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voronoi_cbsa::NeighborInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.neighbors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VORONOI_CBSA_MESSAGE_NEIGHBORINFOARRAY_H
