// Generated by gencpp from file voronoi_cbsa/TargetInfo.msg
// DO NOT EDIT!


#ifndef VORONOI_CBSA_MESSAGE_TARGETINFO_H
#define VORONOI_CBSA_MESSAGE_TARGETINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Twist.h>

namespace voronoi_cbsa
{
template <class ContainerAllocator>
struct TargetInfo_
{
  typedef TargetInfo_<ContainerAllocator> Type;

  TargetInfo_()
    : id(0)
    , position()
    , height(0.0)
    , covariance()
    , weight(0.0)
    , velocity()
    , required_sensor()  {
    }
  TargetInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , position(_alloc)
    , height(0.0)
    , covariance(_alloc)
    , weight(0.0)
    , velocity(_alloc)
    , required_sensor(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _height_type;
  _height_type height;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _covariance_type;
  _covariance_type covariance;

   typedef float _weight_type;
  _weight_type weight;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _required_sensor_type;
  _required_sensor_type required_sensor;





  typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TargetInfo_

typedef ::voronoi_cbsa::TargetInfo_<std::allocator<void> > TargetInfo;

typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfo > TargetInfoPtr;
typedef boost::shared_ptr< ::voronoi_cbsa::TargetInfo const> TargetInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voronoi_cbsa::TargetInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::voronoi_cbsa::TargetInfo_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::TargetInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.height == rhs.height &&
    lhs.covariance == rhs.covariance &&
    lhs.weight == rhs.weight &&
    lhs.velocity == rhs.velocity &&
    lhs.required_sensor == rhs.required_sensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::voronoi_cbsa::TargetInfo_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::TargetInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace voronoi_cbsa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a11d744703fb2fb21b1eb6c816c6cd6f";
  }

  static const char* value(const ::voronoi_cbsa::TargetInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa11d744703fb2fb2ULL;
  static const uint64_t static_value2 = 0x1b1eb6c816c6cd6fULL;
};

template<class ContainerAllocator>
struct DataType< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voronoi_cbsa/TargetInfo";
  }

  static const char* value(const ::voronoi_cbsa::TargetInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64                   id\n"
"geometry_msgs/Point     position\n"
"float32                 height\n"
"float64[]               covariance\n"
"float32                 weight\n"
"geometry_msgs/Twist     velocity\n"
"string[]                required_sensor\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::voronoi_cbsa::TargetInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.height);
      stream.next(m.covariance);
      stream.next(m.weight);
      stream.next(m.velocity);
      stream.next(m.required_sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voronoi_cbsa::TargetInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voronoi_cbsa::TargetInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "weight: ";
    Printer<float>::stream(s, indent + "  ", v.weight);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "required_sensor[]" << std::endl;
    for (size_t i = 0; i < v.required_sensor.size(); ++i)
    {
      s << indent << "  required_sensor[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.required_sensor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VORONOI_CBSA_MESSAGE_TARGETINFO_H
