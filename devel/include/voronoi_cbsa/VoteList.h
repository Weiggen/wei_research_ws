// Generated by gencpp from file voronoi_cbsa/VoteList.msg
// DO NOT EDIT!


#ifndef VORONOI_CBSA_MESSAGE_VOTELIST_H
#define VORONOI_CBSA_MESSAGE_VOTELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace voronoi_cbsa
{
template <class ContainerAllocator>
struct VoteList_
{
  typedef VoteList_<ContainerAllocator> Type;

  VoteList_()
    : index(0)
    , vote(false)  {
    }
  VoteList_(const ContainerAllocator& _alloc)
    : index(0)
    , vote(false)  {
  (void)_alloc;
    }



   typedef int64_t _index_type;
  _index_type index;

   typedef uint8_t _vote_type;
  _vote_type vote;





  typedef boost::shared_ptr< ::voronoi_cbsa::VoteList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voronoi_cbsa::VoteList_<ContainerAllocator> const> ConstPtr;

}; // struct VoteList_

typedef ::voronoi_cbsa::VoteList_<std::allocator<void> > VoteList;

typedef boost::shared_ptr< ::voronoi_cbsa::VoteList > VoteListPtr;
typedef boost::shared_ptr< ::voronoi_cbsa::VoteList const> VoteListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voronoi_cbsa::VoteList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voronoi_cbsa::VoteList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::voronoi_cbsa::VoteList_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::VoteList_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.vote == rhs.vote;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::voronoi_cbsa::VoteList_<ContainerAllocator1> & lhs, const ::voronoi_cbsa::VoteList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace voronoi_cbsa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voronoi_cbsa::VoteList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voronoi_cbsa::VoteList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voronoi_cbsa::VoteList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4974848ca173ad3d0044de0990068ffc";
  }

  static const char* value(const ::voronoi_cbsa::VoteList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4974848ca173ad3dULL;
  static const uint64_t static_value2 = 0x0044de0990068ffcULL;
};

template<class ContainerAllocator>
struct DataType< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voronoi_cbsa/VoteList";
  }

  static const char* value(const ::voronoi_cbsa::VoteList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 index\n"
"bool vote\n"
;
  }

  static const char* value(const ::voronoi_cbsa::VoteList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.vote);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VoteList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voronoi_cbsa::VoteList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voronoi_cbsa::VoteList_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int64_t>::stream(s, indent + "  ", v.index);
    s << indent << "vote: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vote);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VORONOI_CBSA_MESSAGE_VOTELIST_H
