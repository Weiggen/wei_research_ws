// Generated by gencpp from file state_estimation/Plot.msg
// DO NOT EDIT!


#ifndef STATE_ESTIMATION_MESSAGE_PLOT_H
#define STATE_ESTIMATION_MESSAGE_PLOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>

namespace state_estimation
{
template <class ContainerAllocator>
struct Plot_
{
  typedef Plot_<ContainerAllocator> Type;

  Plot_()
    : header()
    , GT_pose()
    , est_pose()
    , GT_twist()
    , est_twist()
    , RMSE_p(0.0)
    , RMSE_v(0.0)
    , det_p(0.0)  {
    }
  Plot_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , GT_pose(_alloc)
    , est_pose(_alloc)
    , GT_twist(_alloc)
    , est_twist(_alloc)
    , RMSE_p(0.0)
    , RMSE_v(0.0)
    , det_p(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _GT_pose_type;
  _GT_pose_type GT_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _est_pose_type;
  _est_pose_type est_pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _GT_twist_type;
  _GT_twist_type GT_twist;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _est_twist_type;
  _est_twist_type est_twist;

   typedef double _RMSE_p_type;
  _RMSE_p_type RMSE_p;

   typedef double _RMSE_v_type;
  _RMSE_v_type RMSE_v;

   typedef double _det_p_type;
  _det_p_type det_p;





  typedef boost::shared_ptr< ::state_estimation::Plot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimation::Plot_<ContainerAllocator> const> ConstPtr;

}; // struct Plot_

typedef ::state_estimation::Plot_<std::allocator<void> > Plot;

typedef boost::shared_ptr< ::state_estimation::Plot > PlotPtr;
typedef boost::shared_ptr< ::state_estimation::Plot const> PlotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_estimation::Plot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_estimation::Plot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_estimation::Plot_<ContainerAllocator1> & lhs, const ::state_estimation::Plot_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.GT_pose == rhs.GT_pose &&
    lhs.est_pose == rhs.est_pose &&
    lhs.GT_twist == rhs.GT_twist &&
    lhs.est_twist == rhs.est_twist &&
    lhs.RMSE_p == rhs.RMSE_p &&
    lhs.RMSE_v == rhs.RMSE_v &&
    lhs.det_p == rhs.det_p;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_estimation::Plot_<ContainerAllocator1> & lhs, const ::state_estimation::Plot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_estimation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_estimation::Plot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_estimation::Plot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimation::Plot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimation::Plot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimation::Plot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimation::Plot_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_estimation::Plot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "789b79485aceaa0b29456291c24a8393";
  }

  static const char* value(const ::state_estimation::Plot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x789b79485aceaa0bULL;
  static const uint64_t static_value2 = 0x29456291c24a8393ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimation::Plot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_estimation/Plot";
  }

  static const char* value(const ::state_estimation::Plot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_estimation::Plot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Pose GT_pose\n"
"geometry_msgs/Pose est_pose\n"
"geometry_msgs/Twist GT_twist\n"
"geometry_msgs/Twist est_twist\n"
"float64 RMSE_p\n"
"float64 RMSE_v\n"
"float64 det_p\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::state_estimation::Plot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_estimation::Plot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.GT_pose);
      stream.next(m.est_pose);
      stream.next(m.GT_twist);
      stream.next(m.est_twist);
      stream.next(m.RMSE_p);
      stream.next(m.RMSE_v);
      stream.next(m.det_p);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Plot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimation::Plot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_estimation::Plot_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "GT_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.GT_pose);
    s << indent << "est_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.est_pose);
    s << indent << "GT_twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.GT_twist);
    s << indent << "est_twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.est_twist);
    s << indent << "RMSE_p: ";
    Printer<double>::stream(s, indent + "  ", v.RMSE_p);
    s << indent << "RMSE_v: ";
    Printer<double>::stream(s, indent + "  ", v.RMSE_v);
    s << indent << "det_p: ";
    Printer<double>::stream(s, indent + "  ", v.det_p);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATION_MESSAGE_PLOT_H
